#!groovy
@Library("jenkinslibrary") _    //jenkins: Manage Jenkins -> configure system -> Global Pipeline Libraries -> Library Name


// libraries -> func




// environment -> parameters
String Service = "${env.Service}"
String releaseEnv = "${env.releaseEnv}"
String projectType = "webSiteProject"


def remote = [:]	

//pipeline
pipeline{
    agent any
    options {
    timestamps() 
    skipDefaultCheckout() 
    //disableConcurrentBuilds() 
    timeout(time: 1, unit: "HOURS") 
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '2', numToKeepStr: '2'))
	}
    stages{
		stage("initial env"){  // initial env parmaters to global pipeline
			steps{
				script{
					// config file
					def baseEnvConfig = libraryResource "com/${projectType}/${releaseEnv}/conf/base.groovy"
					def serviceEnvConfig = libraryResource "com/${projectType}/${releaseEnv}/conf/${Service}.groovy"
					writeFile encoding: 'UTF-8', file: 'base.groovy', text: baseEnvConfig
					writeFile encoding: 'UTF-8', file: 'service.groovy', text: serviceEnvConfig
					load 'base.groovy'
					load 'service.groovy'
					//choice resources file 	
					sh "rm -rf base.groovy service.groovy"
					remote.allowAnyHosts = true
					remote。logLevel = "INFO"
				}
			}
		}
		stage("roll back"){  // pull code from gitlab 
        	when { 
        		beforeAgent true;
        		environment name: 'status', value: 'rollback'
        	}
            steps{
				script{
					withCredentials([sshUserPrivateKey(credentialsId: credentialsId, keyFileVariable: 'identity', passphraseVariable: '', usernameVariable: 'userName')]) {
						remote.user = userName
						remote.identityFile = identity
						writeFile file: 'rollback.sh', text: """
							backUpTgzFile=`ls -tr ${backUpDir}/${Service}@*.tgz |tail -1 `
							[[ \${backUpTgzFile} == '' ]] && echo no such file  && exit 13
							[[ -d ${NginxRootPath}/${Service} ]] && rm -rf ${NginxRootPath}/${Service}
							tar xf ${backUpDir}/\${backUpTgzFile} -C ${NginxRootPath}/
							"""
						//resource资源会把值都转换为字符串，不能写列表
						remoteAddr = remoteAddr.tokenize(",")
						remoteAddr.each{
							remote.name = it
							remote.host = it
							sshScript remote: remote, script: "rollback.sh"
							sshCommand remote: remote, command: "[[ -d ${NginxRootPath}/${Service} ]] && /usr/sbin/nginx -s reload || error ${NginxRootPath}/${Service} does not exists"
						}
						sh "rm -f backup.sh"
					}
				}
           }
        }
        stage("pull code"){  // pull code from gitlab 
        	when { 
        		beforeAgent true;
        		environment name: 'status', value: 'update'
        	}
            steps{
				script{
				checkout([$class: 'GitSCM', 
					branches: [[name: gitlab_branch]], 
					doGenerateSubmoduleConfigurations: false, 
					extensions: [], submoduleCfg: [], 
					userRemoteConfigs: [[credentialsId: gitlab_auth, 
					url: gitlab_url ]]])
				}
           }
        }
		stage("update to nginx"){  
			when { 
        		beforeAgent true;
        		environment name: 'Status', value: 'update'
        	}
		    steps{
		    	script{
		    		
		    		sh returnStatus: true, script: "[[ -f ${Service}.tgz ]] && rm -f ${Service}.tgz"
		    		
		    		dir(target_dir){
		    		    sh "tar zcf ${WORKSPACE}/${Service}.tgz ./*"
		    		}

	    			
		    		withCredentials([sshUserPrivateKey(credentialsId: credentialsId, keyFileVariable: 'identity', passphraseVariable: '', usernameVariable: 'userName')]) {
						remote.user = userName
						remote.identityFile = identity
						//resource资源会把值都转换为字符串，不能写列表
						remoteAddr = remoteAddr.tokenize(",")
						remoteAddr.each{							
							println(it)
							remote.name = it
							remote.host = it
							
							sshPut remote: remote, from: "${Service}.tgz", into: NginxRootPath
							
							sshCommand remote: remote, command: "rm -f ${backUpDir}/${Service}@*.tgz"
							
							sshCommand remote: remote, command: "[[ -d ${NginxRootPath}/${Service} ]] && cd ${NginxRootPath}/ && tar -zcf ${backUpDir}/${Service}@${Tag}.tgz ${Service} || exit 10"
							
							sshCommand remote: remote, command: "[[ -d ${NginxRootPath}/${Service} ]] && rm -rf ${NginxRootPath}/${Service} && mkdir -p ${NginxRootPath}/${Service} || mkdir -p ${NginxRootPath}/${Service}"
							
							sshCommand remote: remote, command: "[[ -f ${NginxRootPath}/${Service}.tgz ]] && tar xf ${NginxRootPath}/${Service}.tgz -C ${NginxRootPath}/${Service}/ && /usr/sbin/nginx -s reload || error ${NginxRootPath}/${Service}.tgz does not exists"
							
							sshCommand remote: remote, command: "rm -f ${NginxRootPath}/${Service}.tgz"
						}
						
		    		}
		    		cleanWs cleanWhenFailure: false, cleanWhenNotBuilt: false, cleanWhenUnstable: false
		        }
		    }
		}
    }
}