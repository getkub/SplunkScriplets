#!groovy
@Library("share_library") _ 

//run env type: dev / prod / test
String envType = "${env.envType}"
// String projectName = "projectName"
String projectName = "${env.projectName}"
if (envType == "test") {
	agentName = "dev xxx agent"
} else {
	agentName = "prod xxx agent
}
//pipeline
pipeline{
  agent {label "${agentName}"}
  options {
    timestamps()
    skipDefaultCheckout()
    disableConcurrentBuilds()
    timeout(time: 1, unit: "HOURS")
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '2', numToKeepStr: '2'))
	}
  environment {
				JAVA_HOME = "/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64"
				PATH = "/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/usr/local/maven/bin:/usr/local/node/bin:/home/jenkins/.local/bin:/home/jenkins/bin"
				GO111MODULE = "on"
				GOPROXY = "https://goproxy.io,direct"
				LANG = "en_US.UTF-8"
				GOSUMDB = "off"
				GOPRIVATE = "some.url.*"
    }
  stages{
		stage("init env"){  // build target java project
			steps{
				script{
					def baseEnvConfig = libraryResource "com/${envType}/conf/base.groovy"
					def serviceEnvConfig = libraryResource "com/${envType}/conf/${projectName}.groovy"
					writeFile encoding: 'UTF-8', file: 'base.groovy', text: baseEnvConfig
					writeFile encoding: 'UTF-8', file: "${projectName}.groovy", text: serviceEnvConfig
					load 'base.groovy'
					load "${projectName}.groovy"
				}
			}
		}
				stage("pull code"){  // build target java project
			steps{
				script{
					checkout([$class: 'GitSCM', 
						branches: [[name: bitbucket_branch ]], 
						doGenerateSubmoduleConfigurations: false, 
						extensions: [], submoduleCfg: [], 
						userRemoteConfigs: [[credentialsId: bitbucketCredentialsId, 
						url: bitbucket_url ]]])
				}
			}
		}
		stage("make k8s yaml"){  // build target java project
			steps{
				script{
          env.tag = sh(returnStdout: true, script: 'git log --pretty=format:"%h" -n 1').trim()
          env.image_name = "${registry_url}/xxx-${envType}/${projectName}:${tag}"

					env.backendYamlSource = libraryResource "com/${envType}/yaml/deployment-${projectName}.yaml"
					sh "echo \"${backendYamlSource}\" > ${backendYamlFile}"
					env.backendYamlString = readFile encoding: 'utf8', file: backendYamlFile
				}
			}
		}
		stage("build"){  // build target java project
			steps{
				script{
					dir(WORKSPACE) {
								sh "${compileCommand}"
							}
				}
			}
		}
		stage("image build"){  // build target docker image and push to harbor
			steps{
				script{
					withCredentials([usernamePassword(credentialsId: 	imageRegistryCredentialsId, 
								passwordVariable: 'image_password',usernameVariable: 'image_username')]) {
						dir(dockerfile_path) {
							sh "sudo /usr/bin/docker login ${registry_url} --username=${image_username} --password=${image_password}"
							sh "sudo /usr/bin/docker build -t ${image_name} ."
							sh "sudo /usr/bin/docker push ${image_name}"
							sh "sudo /usr/bin/docker rmi ${image_name}"
						}
					}
				}
			}	
		}    
		stage("deploy project to k8s server"){  
			steps{
				script{

							log.info("Deploy ${projectName} .....................................")
							data = kubernetes.GetDeployment(namespace,projectName,envType)
							if (data.status <= 399) {
								log.info("Update  ${projectName}")
								kubernetes.UpdateDeployment(namespace,projectName,backendYamlString,envType)
							} else {						
								log.info("Create  ${projectName}")		
								kubernetes.CreateDeployment(namespace,backendYamlString,envType)
							} 

							log.info("Deploy ${projectName} service .....................................")
							data = kubernetes.GetService(namespace,projectName,envType)
							if (data.status <= 399) {
								yaml_data = readYaml text: data.content
								env.resourceVersion = "resourceVersion: \"${yaml_data.metadata.resourceVersion}\""
								env.serviceYamlSource = libraryResource "com/${envType}/yaml/service-${projectName}.yaml"
								sh "echo \"${serviceYamlSource}\" > ${serviceYamlFIle}"
								serviceYamlString = readFile encoding: 'utf8', file: serviceYamlFIle

								log.info("Update  ${projectName} service")

								kubernetes.UpdateService(namespace,projectName,serviceYamlString,envType)
							} else {
								env.resourceVersion = ""
								env.serviceYamlSource = libraryResource "com/${envType}/yaml/service-${projectName}.yaml"
								sh "echo \"${serviceYamlSource}\" > ${serviceYamlFIle}"
								serviceYamlString = readFile encoding: 'utf8', file: serviceYamlFIle

								log.info("Create  ${projectName} service")

								kubernetes.CreateService(namespace,serviceYamlString,envType)
							} 

							sleep 2
							kubernetes.GetDeployment(namespace,projectName,envType)
							kubernetes.GetService(namespace,projectName,envType)
				} 
			}
		}
	} 		
}
