#!groovy
@Library("jenkinslibrary") _ 


//变量使用测试

String aaa = "this is global string,can use to any where"
bbb = "this is global string too,can use to any where"
def ccc = "this also is global string,can use to any where"
env.lowerstring = "this is lowerstring but can use upper"
pipeline{
    agent any
	stages{
    	stage("region1"){
    	    steps{
    	    	script{
					def serviceEnvConfig = libraryResource "com/javaProject/preProd/conf/test.groovy"
					writeFile encoding: 'UTF-8', file: 'service.groovy', text: serviceEnvConfig
					load 'service.groovy'
					String ddd = "only this region can use, can not use to another regions"
					def eee = "only this region can use too, can not use to another regions"
					fff = "i am the global var,can use to any where"		
					env.ggg = ["this","is","string","not","list"]  //使用env变量，只能设置string类型数据，即使填写的是列表，也会转换为string
					
					
					///println
					println(ddd)
					println(eee)
    	    	}
    	    }
    	}
    	stage("region2"){
    	    steps{
    	    	script{
					println(aaa)
					println(bbb)
					println(ccc)
					
					println(env.ggg..getClass())   //string
					println(ggg.getClass())			//string
					dir(WORKSPACE){
					    String regiontest = "this var only use in this brackets"
					    println(regiontest)
					}

					// println(regiontest)  //exception
					//println(ddd)     //exception
					println(abc)
					println(abcPms)
					println(abcPms02)
					println(testString)
					println(testString02)
					println("addrString: " + addrString.getClass())
					println("addrlist: " + addrlist.getClass())
					
					sh """
						a=`ls /root/*`
						echo \$a
						"""
					//env ignore lower and upper
					println("lowerstring: " + lowerstring) 
					println("Lowerstring: " + Lowerstring) 
					println("LOWerSTring: " + LOWerSTring) 
					println("LOWERSTRING: " + LOWERSTRING) 
					
					
					//使用resource当作配置文件库时，出现的特殊现象
					dockerFile = libraryResource "com/javaProject/preProd/dockerfile/common.dockerfile"
					sh "echo \"${deploymentYamlFile}\" > test.yaml"   // 注意观察 test.yaml 和 test1.yaml 区别
					env.harbor_host = harbor_host
					env.JDK_V = JDK_V
					env.Port = Port
					env.dockerFile_start = dockerFile_start
					sh "echo \"${deploymentYamlFile}\" > test1.yaml"   // 注意观察 test.yaml 和 test1.yaml 区别
					/*
						总结： 
							在pipeline 外部使用环境变量，无论带变量类型定义还是不带，都是全局的
							在pipeline内部定义的变量，带类型定义的变量作用域只有当前大括号内能生效，出去就无效，resource中同样适用
							在pipeline内部定义的变量，不带类型定义的变量作用域是全局的。resource中同样适用
							在env.中定义的变量，一律为String类型，即使以[vars]括起来也会全部变为String类型
							sh命令执行时使用${var}获取的是groovy变量，如果执行命令过程中生成了shell变量，调用时需要"$",添加反斜杠.
							通常情况下：sh 中都可以引用groovy的变量，即加env.或者不加都可获取
							本条是重点：当引用resource中文件时，如果文件中包含变量，并且不是groovy文件例如yaml文件，jenkins无法转化其中的变量为具体值，此时只能使用shell方式转化，但shell只识别env中的环境变量，换句话说，不带env前缀定义的变量，统统不能用在文件生成时
					*/
					
					
    	    	}
    	    }
    	}
    }
}