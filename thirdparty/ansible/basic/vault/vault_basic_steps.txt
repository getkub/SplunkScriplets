# key stored in another file ($my_key_file)
my_key_file="/tmp/key.txt"
echo "my_key" > $my_key_file

# ------------------------------ #
# Encrypt a string
# ------------------------------ #
secret_string="mypassword"
secret_identifier="my_secret_1"
encrypted_file_for_string="/tmp/myencrypted_file"

# below now has a bug
ansible-vault encrypt_string ${secret_string} --vault-password-file ${my_key_file} --name ${secret_identifier} > ${encrypted_file_for_string}.yml
# to do above, cd to where the file is kept
cd /tmp
encrypted_file_for_string="myencrypted_file"
echo -n $secret_string | ansible-vault encrypt_string --vault-id dev@${encrypted_file_for_string} --stdin-name ${secret_identifier} > ${encrypted_file_for_string}.yml

# ------------------------------ #
# Encrypt a file (Remember the file itself get's encrypted)
# ------------------------------ #
secret_file="/tmp/my_secret_file"
ansible-vault encrypt ${secret_file} --vault-password-file ${my_key_file} --encrypt-vault-id default


# ------------------------------ #
# decrypt string
# ------------------------------ #
ansible localhost -m debug -a var=${secret_identifier} -e "@${encrypted_file_for_string}" --vault-password-file ${my_key_file}
 
# ------------------------------ #
# decrypted file view (and put to a new location if need be)
# ------------------------------ #
ansible-vault view ${secret_file} --vault-password-file ${my_key_file} 

# ------------------------------ #
# Decrypt the file itself
# ------------------------------ #
ansible-vault decrypt ${secret_file} --vault-password-file ${my_key_file}



# To use within a playbook, ensure that the variable is imported within the playbook 
# (RUN with ansible-playbook my_playbook --vault-password-file ~/.vault_pass.txt)

- include_vars: "my_encrypted_variable_file.yml"

- debug:
    msg: "{{my_encrypted_var_within_the_file}}"
    
