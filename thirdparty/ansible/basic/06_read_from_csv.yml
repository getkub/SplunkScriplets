---
- name: "Get Variables from YML"
  hosts: localhost
  gather_facts: no
  tasks:
    - name: "Read as a list"
      read_csv:
        path: ./configs/06_country_host_invalid.csv
      register: hosts_list

    - debug:
        msg: '{{ hosts_list }}'

    - name: "Read as a dictionary"
      read_csv:
        path: ./configs/06_country_host_valid.csv
        key: id
      register: hosts

    - debug:
        msg: '{{ hosts.dict.ID01.id}} =>  {{hosts.dict.ID01.hostname}},{{hosts.dict.ID01.host_ip}},{{hosts.dict.ID01.country_code}},{{hosts.dict.ID01.country_name}}'

    - name: "Set some regex values"
      set_fact: hostname_regex="^\w+$"

    - name: "Validate CSV fields"
      debug:
        msg: '{{hostname}}'
      loop: "{{ hosts.dict|dict2items }}"
      vars:
        - "hostname": "{{item.value.hostname}}"
      when:
        - hostname is not match(hostname_regex)

    - name: "Validate CSV fields: Set fact"
      set_fact: incorrect_line={{item}}
      loop: "{{ hosts.dict|dict2items }}"
      vars:
        - "hostname": "{{item.value.hostname}}"
      when:
        - hostname is not match(hostname_regex)

    - debug:
        msg: '{{ incorrect_line }}'
      when:  incorrect_line is defined

    - name: "Set csv headers"
      set_fact: csv_headers="id,hostname"

    - name: "Set regex variable"
      set_fact: regex_inverse_pattern=(^(?!(?:^\w+\,\w+,(?:[0-9]{1,3}\.){3}[0-9]{1,3}\,\w\w\,.+$)).+$)

    - name: "Validate CSV using awk"
      shell: perl -lne 'print $1 if /{{regex_inverse_pattern}}/' ./configs/06_country_host_invalid.csv | grep -v '{{csv_headers}}'
      register: awk_output
      failed_when: awk_output.rc == 0
      ignore_errors: yes

    - name: "awk_output"
      debug:
        msg: '{{ awk_output }}'
      when:  awk_output.rc == 0

    - name: "END play"
      meta: end_play
      when:  awk_output.rc == 0
 
    - debug:
        msg: 'Success. No errors found in CSV'
